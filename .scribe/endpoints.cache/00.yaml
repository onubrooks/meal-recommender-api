## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Data Management'
description: |-

  APIs for managing data CRUD operations
endpoints:
  -
    httpMethods:
      - POST
    uri: api/meals
    metadata:
      title: 'Add/Create/Update a Meal'
      description: 'Create or update a meal record, supplying the name and description to be saved.'
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Name of the meal.'
        required: false
        example: 'Grilled Fish with Spice Chilli'
        type: string
      description:
        name: description
        description: 'Brief description.'
        required: false
        example: 'This is the description'
        type: string
    responses:
      -
        status: 400
        content: .
        headers: []
        description: '400, Service is down or an unexpected error occurred'
      -
        status: 200
        content: '{"status":"success","message":"save meal successful","data":{"id":6,"name":"Grilled Fish with Spice Chilli","description":"This is the description","created_at":"2021-08-05T14:16:49.000000Z","updated_at":"2021-08-05T14:16:49.000000Z"}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '56'
          access-control-allow-origin: '*'
        description: null
    responseFields:
      status:
        name: status
        description: 'The status of this API (`success` or `error`).'
        type: string
      message:
        name: message
        description: 'The service message based on the status of the call.'
        type: string
      data:
        name: data
        description: 'Meal record just created or updated.'
        type: object
  -
    httpMethods:
      - POST
    uri: api/allergies
    metadata:
      title: 'Add/Create/Update an Allergy'
      description: 'Create or update an allergy record, supplying the name and description to be saved.'
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Name of the allergy.'
        required: false
        example: 'Fish Allergy'
        type: string
      description:
        name: description
        description: 'Brief description of the allergy.'
        required: false
        example: 'Allergic to fish!'
        type: string
    responses:
      -
        status: 400
        content: .
        headers: []
        description: '400, Service is down or an unexpected error occurred'
      -
        status: 400
        content: '{"status":"error","message":"cannot create allergy, only 3 allergies are currently supported","errors":[]}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '54'
          access-control-allow-origin: '*'
        description: null
    responseFields:
      status:
        name: status
        description: 'The status of this API (`success` or `error`).'
        type: ''
      message:
        name: message
        description: 'The service message based on the status of the call.'
        type: ''
      data:
        name: data
        description: 'Allergy record just created or updated.'
        type: ''
  -
    httpMethods:
      - POST
    uri: api/items
    metadata:
      title: 'Add/Create/Update an Item'
      description: 'Create or update an item record, supplying the name and description to be saved.'
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Name of the item.'
        required: false
        example: 'Roast Fish'
        type: string
      description:
        name: description
        description: 'Brief description of the item.'
        required: false
        example: 'fish roasted with hot fire'
        type: string
    responses:
      -
        status: 400
        content: .
        headers: []
        description: '400, Service is down or an unexpected error occurred'
      -
        status: 200
        content: '{"status":"success","message":"save item successful","data":{"id":12,"name":"Roast Fish","description":"fish roasted with hot fire","created_at":"2021-08-05T14:16:49.000000Z","updated_at":"2021-08-05T14:16:49.000000Z"}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '52'
          access-control-allow-origin: '*'
        description: null
    responseFields:
      status:
        name: status
        description: 'The status of this API (`success` or `error`).'
        type: string
      message:
        name: message
        description: 'The service message based on the status of the call.'
        type: string
      data:
        name: data
        description: 'Item record just created or updated.'
        type: object
  -
    httpMethods:
      - POST
    uri: api/users
    metadata:
      title: 'Add/Create/Update a User'
      description: 'Create or update a user record, supplying the name, email and password to be saved.'
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Name of the user.'
        required: false
        example: 'Idris Elba'
        type: string
      email:
        name: email
        description: 'User email.'
        required: false
        example: elba@onubrooks.io
        type: string
      password:
        name: password
        description: 'User password.'
        required: false
        example: password
        type: string
      password_confirmation:
        name: password_confirmation
        description: 'Password confirmation.'
        required: false
        example: password
        type: string
    responses:
      -
        status: 400
        content: .
        headers: []
        description: '400, Service is down or an unexpected error occurred'
      -
        status: 200
        content: '{"status":"success","message":"save user successful","data":{"id":3,"name":"Idris Elba","email":"elba@onubrooks.io","email_verified_at":null,"created_at":"2021-08-05T14:16:50.000000Z","updated_at":"2021-08-05T14:19:28.000000Z"}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '50'
          access-control-allow-origin: '*'
        description: null
    responseFields:
      status:
        name: status
        description: 'The status of this API (`success` or `error`).'
        type: string
      message:
        name: message
        description: 'The service message based on the status of the call.'
        type: string
      data:
        name: data
        description: 'User record just created or updated.'
        type: object
  -
    httpMethods:
      - GET
    uri: api/meals
    metadata:
      title: 'Fetch Meals'
      description: |-
        Fetch a paginated list of all the meals in the recommender. If everything is okay, you'll get a 200 OK response.

        Otherwise, the request will fail with a 400 error, and an error field.
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 400
        content: .
        headers: []
        description: '400, Service is down or an unexpected error occurred'
      -
        status: 200
        content: '{"status":"success","message":"fetch meals successful","data":[{"id":1,"name":"Eba and Ewedu","description":"special eba from the western part of Nigeria","created_at":"2021-08-04T22:40:03.000000Z","updated_at":"2021-08-04T22:40:03.000000Z","items":[{"id":1,"name":"Ewedu","description":"Ewedu soup","pivot":{"meal_id":1,"item_id":1}},{"id":11,"name":"Eba","description":"delicious swallow","pivot":{"meal_id":1,"item_id":11}}]},{"id":2,"name":"fufu and Ewedu","description":"special fufu from the eastern part of Nigeria","created_at":"2021-08-04T22:41:45.000000Z","updated_at":"2021-08-04T22:41:45.000000Z","items":[{"id":1,"name":"Ewedu","description":"Ewedu soup","pivot":{"meal_id":2,"item_id":1}},{"id":3,"name":"Fufu","description":"exotic swallow","pivot":{"meal_id":2,"item_id":3}}]},{"id":3,"name":"akpu and Ewedu","description":"special akpu from the eastern part of Nigeria","created_at":"2021-08-04T22:42:00.000000Z","updated_at":"2021-08-04T22:42:00.000000Z","items":[]},{"id":4,"name":"pounded yam and Ewedu","description":"special pounded yam from the southern part of Nigeria","created_at":"2021-08-04T22:42:25.000000Z","updated_at":"2021-08-04T22:42:25.000000Z","items":[]},{"id":5,"name":"Eba and Okra","description":"special garri cake with okra soup","created_at":"2021-08-04T22:56:07.000000Z","updated_at":"2021-08-04T22:56:07.000000Z","items":[]},{"id":6,"name":"Grilled Fish with Spice Chilli","description":"This is the description","created_at":"2021-08-05T14:16:49.000000Z","updated_at":"2021-08-05T14:16:49.000000Z","items":[]}]}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '57'
          access-control-allow-origin: '*'
        description: null
    responseFields:
      status:
        name: status
        description: 'The status of this API (`success` or `error`).'
        type: string
      message:
        name: message
        description: 'The service message based on the status of the call.'
        type: string
      data:
        name: data
        description: 'List of meals queried from the API.'
        type: array
  -
    httpMethods:
      - GET
    uri: api/allergies
    metadata:
      title: 'Fetch Allergies'
      description: |-
        Fetch a paginated list of all the allergies in the recommender. If everything is okay, you'll get a 200 OK response.

        Otherwise, the request will fail with a 400 error, and an error field.
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 400
        content: .
        headers: []
        description: '400, Service is down or an unexpected error occurred'
      -
        status: 200
        content: '{"status":"success","message":"fetch allergies successful","data":[{"id":1,"name":"Nut Allergy","description":"Allergic to nuts","created_at":"2021-08-04T22:51:03.000000Z","updated_at":"2021-08-04T22:51:03.000000Z"},{"id":2,"name":"ShellFish Allergy","description":"Allergic to ShellFish","created_at":"2021-08-04T22:51:18.000000Z","updated_at":"2021-08-04T22:51:18.000000Z"},{"id":3,"name":"SeaFood Allergy","description":"Allergic to SeaFood","created_at":"2021-08-04T22:51:36.000000Z","updated_at":"2021-08-04T22:51:36.000000Z"}]}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '55'
          access-control-allow-origin: '*'
        description: null
    responseFields:
      status:
        name: status
        description: 'The status of this API (`success` or `error`).'
        type: string
      message:
        name: message
        description: 'The service message based on the status of the call.'
        type: string
      data:
        name: data
        description: 'List of allergies queried from the API.'
        type: array
  -
    httpMethods:
      - GET
    uri: api/items
    metadata:
      title: 'Fetch Items'
      description: |-
        Fetch a paginated list of all the items in the recommender. If everything is okay, you'll get a 200 OK response.

        Otherwise, the request will fail with a 400 error, and an error field.
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 400
        content: .
        headers: []
        description: '400, Service is down or an unexpected error occurred'
      -
        status: 200
        content: '{"status":"success","message":"fetch items successful","data":[{"id":1,"name":"Ewedu","description":"Ewedu soup","created_at":"2021-08-04T22:45:11.000000Z","updated_at":"2021-08-04T22:45:11.000000Z","allergies":[{"id":1,"name":"Nut Allergy","description":"Allergic to nuts","pivot":{"item_id":1,"allergy_id":1}}]},{"id":2,"name":"Pounded Yam","description":"Yam that is pounded","created_at":"2021-08-04T22:45:30.000000Z","updated_at":"2021-08-04T22:45:30.000000Z","allergies":[{"id":2,"name":"ShellFish Allergy","description":"Allergic to ShellFish","pivot":{"item_id":2,"allergy_id":2}}]},{"id":3,"name":"Fufu","description":"exotic swallow","created_at":"2021-08-04T22:45:46.000000Z","updated_at":"2021-08-04T22:45:46.000000Z","allergies":[{"id":2,"name":"ShellFish Allergy","description":"Allergic to ShellFish","pivot":{"item_id":3,"allergy_id":2}},{"id":3,"name":"SeaFood Allergy","description":"Allergic to SeaFood","pivot":{"item_id":3,"allergy_id":3}}]},{"id":4,"name":"Akpu","description":"exotic swallow with a spice to it","created_at":"2021-08-04T22:45:59.000000Z","updated_at":"2021-08-04T22:45:59.000000Z","allergies":[]},{"id":5,"name":"Oha soup","description":"exotic soup with a bling to it","created_at":"2021-08-04T22:46:16.000000Z","updated_at":"2021-08-04T22:46:16.000000Z","allergies":[]},{"id":6,"name":"Edikaikong soup","description":"exotic soup everyone wants but cant have","created_at":"2021-08-04T22:46:39.000000Z","updated_at":"2021-08-04T22:46:39.000000Z","allergies":[]},{"id":7,"name":"Boiled rice","description":"rice grain boiled","created_at":"2021-08-04T22:47:01.000000Z","updated_at":"2021-08-04T22:47:01.000000Z","allergies":[]},{"id":8,"name":"Fried rice","description":"rice grain fried","created_at":"2021-08-04T22:47:10.000000Z","updated_at":"2021-08-04T22:47:10.000000Z","allergies":[]},{"id":9,"name":"Jollof rice","description":"rice grain jollof","created_at":"2021-08-04T22:47:22.000000Z","updated_at":"2021-08-04T22:47:22.000000Z","allergies":[]},{"id":10,"name":"Okra soup","description":"delicious soup made with the great okra plant","created_at":"2021-08-04T22:56:45.000000Z","updated_at":"2021-08-04T22:56:45.000000Z","allergies":[]},{"id":11,"name":"Eba","description":"delicious swallow","created_at":"2021-08-04T23:16:05.000000Z","updated_at":"2021-08-04T23:16:05.000000Z","allergies":[]},{"id":12,"name":"Roast Fish","description":"fish roasted with hot fire","created_at":"2021-08-05T14:16:49.000000Z","updated_at":"2021-08-05T14:16:49.000000Z","allergies":[]}]}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '53'
          access-control-allow-origin: '*'
        description: null
    responseFields:
      status:
        name: status
        description: 'The status of this API (`success` or `error`).'
        type: string
      message:
        name: message
        description: 'The service message based on the status of the call.'
        type: string
      data:
        name: data
        description: 'List of items queried from the API.'
        type: array
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      title: 'Fetch Users'
      description: |-
        Fetch a paginated list of all the users in the recommender. If everything is okay, you'll get a 200 OK response.

        Otherwise, the request will fail with a 400 error, and an error field.
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 400
        content: .
        headers: []
        description: '400, Service is down or an unexpected error occurred'
      -
        status: 200
        content: '{"status":"success","message":"fetch users successful","data":[{"id":1,"name":"Brad Pitt","email":"pit@onubrooksapi.com","email_verified_at":null,"created_at":"2021-08-04T22:55:02.000000Z","updated_at":"2021-08-04T22:55:10.000000Z","allergies":[{"id":3,"name":"SeaFood Allergy","description":"Allergic to SeaFood","created_at":"2021-08-04T22:51:36.000000Z","updated_at":"2021-08-04T22:51:36.000000Z","pivot":{"user_id":1,"allergy_id":3}},{"id":1,"name":"Nut Allergy","description":"Allergic to nuts","created_at":"2021-08-04T22:51:03.000000Z","updated_at":"2021-08-04T22:51:03.000000Z","pivot":{"user_id":1,"allergy_id":1}}]},{"id":2,"name":"Harvey Specter","email":"harvey@onubrooksapi.com","email_verified_at":null,"created_at":"2021-08-05T09:01:54.000000Z","updated_at":"2021-08-05T09:01:54.000000Z","allergies":[{"id":2,"name":"ShellFish Allergy","description":"Allergic to ShellFish","created_at":"2021-08-04T22:51:18.000000Z","updated_at":"2021-08-04T22:51:18.000000Z","pivot":{"user_id":2,"allergy_id":2}}]},{"id":3,"name":"Idris Elba","email":"elba@onubrooks.io","email_verified_at":null,"created_at":"2021-08-05T14:16:50.000000Z","updated_at":"2021-08-05T14:16:50.000000Z","allergies":[]}]}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '51'
          access-control-allow-origin: '*'
        description: null
    responseFields:
      status:
        name: status
        description: 'The status of this API (`success` or `error`).'
        type: string
      message:
        name: message
        description: 'The service message based on the status of the call.'
        type: string
      data:
        name: data
        description: 'List of users queried from the API.'
        type: array
